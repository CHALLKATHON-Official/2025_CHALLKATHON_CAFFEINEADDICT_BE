name: Deploy to EC2

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행
      - develop  # 필요시 develop 브랜치도 추가
  workflow_dispatch:  # 수동 실행 가능

env:
  SPRING_PROFILES_ACTIVE: dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5. 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test  # 테스트는 별도로 실행하거나 제외

      # 6. 빌드된 JAR 파일 확인
      - name: Check JAR file
        run: |
          ls -la build/libs/
          echo "JAR_FILE=$(ls build/libs/*.jar | grep -v plain)" >> $GITHUB_ENV

      # 7. EC2에 SSH 키 파일 생성
      - name: Create SSH key file
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # 8. 이전 애플리케이션 종료 및 백업
      - name: Stop existing application
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # 실행 중인 애플리케이션 PID 찾기
            PID=$(pgrep -f "momento.*\.jar" || echo "")
            if [ ! -z "$PID" ]; then
              echo "Stopping existing application (PID: $PID)"
              kill -15 $PID
              sleep 10
              # 프로세스가 여전히 실행 중이면 강제 종료
              if ps -p $PID > /dev/null; then
                kill -9 $PID
              fi
            else
              echo "No existing application found"
            fi
            
            # 로그 백업
            if [ -f /home/${{ secrets.EC2_USER }}/momento/app.log ]; then
              mv /home/${{ secrets.EC2_USER }}/momento/app.log /home/${{ secrets.EC2_USER }}/momento/app.log.$(date +%Y%m%d_%H%M%S)
            fi
            
            # 디렉토리 생성
            mkdir -p /home/${{ secrets.EC2_USER }}/momento
          EOF

      # 9. JAR 파일 전송
      - name: Copy JAR to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no ${{ env.JAR_FILE }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/momento/momento.jar

      # 10. application-dev.yml 파일 생성 및 전송
      - name: Create and copy application-dev.yml
        run: |
          # GitHub Secret에서 설정 파일 내용을 가져와 파일로 생성
          echo "${{ secrets.APPLICATION_DEV_YML }}" > application-dev.yml
          
          # 파일 내용 확인 (디버깅용)
          echo "=== Generated application-dev.yml (first 20 lines) ==="
          head -20 application-dev.yml
          echo "=== End of preview ==="
          
          # EC2로 파일 전송
          scp -i private_key.pem -o StrictHostKeyChecking=no application-dev.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/momento/application-dev.yml

      # 11. 간단한 start.sh 생성 및 전송
      - name: Create and copy start script
        run: |
          cat > start.sh << 'EOF'
          #!/bin/bash
          
          echo "Starting Momento application at $(date)"
          echo "Working directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          
          # 애플리케이션 실행 (외부 설정 파일 사용)
          # Spring Boot는 JAR 파일과 같은 디렉토리의 application-{profile}.yml을 자동으로 로드
          nohup java -jar \
            -Dspring.profiles.active=dev \
            -Xms512m \
            -Xmx1024m \
            -XX:+UseG1GC \
            -XX:MaxGCPauseMillis=200 \
            -Djava.awt.headless=true \
            -Dfile.encoding=UTF-8 \
            -Duser.timezone=Asia/Seoul \
            momento.jar > app.log 2>&1 &
          
          PID=$!
          echo $PID > app.pid
          echo "Application started with PID: $PID"
          echo "Waiting 5 seconds for application to initialize..."
          sleep 5
          
          # 프로세스가 실행 중인지 확인
          if ps -p $PID > /dev/null; then
            echo "Process is running"
          else
            echo "Process failed to start. Check app.log for details"
            if [ -f app.log ]; then
              echo "=== First 50 lines of app.log ==="
              head -50 app.log
            fi
            exit 1
          fi
          EOF
          
          chmod +x start.sh
          
          # 스크립트 내용 확인
          echo "=== Generated start.sh ==="
          cat start.sh
          echo "=== End of start.sh ==="
          
          # EC2로 전송
          scp -i private_key.pem -o StrictHostKeyChecking=no start.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/momento/start.sh

      # 12. 애플리케이션 시작 및 헬스체크
      - name: Start application and health check
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}/momento
            
            # 파일 권한 설정
            chmod 600 application-dev.yml
            chmod +x start.sh
            
            # 현재 파일 상태 확인
            echo "=== Current files in momento directory ==="
            ls -la
            echo "=== End of file list ==="
            
            # 애플리케이션 시작
            echo "Starting application..."
            ./start.sh
            
            # 애플리케이션 시작 확인 (30초 대기)
            echo "Waiting for application to start..."
            SUCCESS=false
            for i in {1..30}; do
              if curl -f -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
                echo "✅ Application is running! (attempt $i/30)"
                echo "Health check response:"
                curl -s http://localhost:8080/actuator/health || true
                SUCCESS=true
                break
              fi
              echo "⏳ Waiting... (attempt $i/30)"
              sleep 1
            done
            
            if [ "$SUCCESS" = true ]; then
              echo "✅ Deployment successful!"
              exit 0
            else
              # 시작 실패 시 디버깅 정보 출력
              echo "❌ Application failed to start after 30 seconds"
              echo ""
              echo "=== Checking Java process ==="
              ps aux | grep java || echo "No Java process found"
              echo ""
              echo "=== Last 100 lines of app.log ==="
              if [ -f app.log ]; then
                tail -100 app.log
              else
                echo "app.log not found"
              fi
              echo ""
              echo "=== System resources ==="
              free -h
              df -h /
              echo ""
              echo "=== Java version ==="
              java -version
              exit 1
            fi
          EOF

      # 13. SSH 키 파일 및 임시 파일 삭제
      - name: Clean up
        if: always()
        run: |
          rm -f private_key.pem
          rm -f start.sh
          rm -f application-dev.yml

      # 14. Slack 알림 (선택사항)
      - name: Send Slack notification
        if: always() && secrets.SLACK_WEBHOOK != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            배포 상태: ${{ job.status }}
            브랜치: ${{ github.ref }}
            커밋: ${{ github.sha }}
            배포 환경: EC2 Dev Server (dev.caffeineoverdose.shop)
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}