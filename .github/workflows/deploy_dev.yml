name: Deploy to EC2

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행
      - develop  # 필요시 develop 브랜치도 추가
  workflow_dispatch:  # 수동 실행 가능

env:
  SPRING_PROFILES_ACTIVE: dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5. 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test  # 테스트는 별도로 실행하거나 제외

      # 6. 빌드된 JAR 파일 확인
      - name: Check JAR file
        run: |
          ls -la build/libs/
          echo "JAR_FILE=$(ls build/libs/*.jar | grep -v plain)" >> $GITHUB_ENV

      # 7. EC2에 SSH 키 파일 생성
      - name: Create SSH key file
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # 8. 이전 애플리케이션 종료 및 백업
      - name: Stop existing application
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # 실행 중인 애플리케이션 PID 찾기
            PID=$(pgrep -f "momento.*\.jar" || echo "")
            if [ ! -z "$PID" ]; then
              echo "Stopping existing application (PID: $PID)"
              kill -15 $PID
              sleep 10
              # 프로세스가 여전히 실행 중이면 강제 종료
              if ps -p $PID > /dev/null; then
                kill -9 $PID
              fi
            else
              echo "No existing application found"
            fi
          
            # 로그 백업
            if [ -f /home/${{ secrets.EC2_USER }}/momento/app.log ]; then
              mv /home/${{ secrets.EC2_USER }}/momento/app.log /home/${{ secrets.EC2_USER }}/momento/app.log.$(date +%Y%m%d_%H%M%S)
            fi
          
            # 디렉토리 생성
            mkdir -p /home/${{ secrets.EC2_USER }}/momento
          EOF

      # 9. JAR 파일 전송
      - name: Copy JAR to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no ${{ env.JAR_FILE }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/momento/momento.jar

      # 10. 로컬에서 start.sh 파일 생성
      - name: Create start script locally
        run: |
          cat > start.sh << 'EOF'
          #!/bin/bash
          
          echo "Starting Momento application at $(date)"
          
          # 애플리케이션 실행 (Spring Boot 스타일)
          nohup java -jar \
            -Dspring.profiles.active=dev \
            -Dspring.datasource.url="${SPRING_DATASOURCE_URL}" \
            -Dspring.datasource.username="${SPRING_DATASOURCE_USERNAME}" \
            -Dspring.datasource.password="${SPRING_DATASOURCE_PASSWORD}" \
            -Djwt.secret="${JWT_SECRET}" \
            -Dspring.security.oauth2.client.registration.kakao.client-id="${KAKAO_CLIENT_ID}" \
            -Dspring.security.oauth2.client.registration.kakao.client-secret="${KAKAO_CLIENT_SECRET}" \
            -Dspring.security.oauth2.client.registration.kakao.redirect-uri="${KAKAO_REDIRECT_URI}" \
            -Dapp.oauth2.authorized-redirect-uris="${AUTHORIZED_REDIRECT_URIS}" \
            -Dapp.cors.allowed-origins="${ALLOWED_ORIGINS}" \
            -Dapp.cookie.refresh-token.domain="${COOKIE_DOMAIN}" \
            -Dspringdoc.swagger-ui.enabled="${SWAGGER_ENABLED:-true}" \
            -Xms512m \
            -Xmx1024m \
            -XX:+UseG1GC \
            -XX:MaxGCPauseMillis=200 \
            -Djava.awt.headless=true \
            -Dfile.encoding=UTF-8 \
            -Duser.timezone=Asia/Seoul \
            momento.jar > app.log 2>&1 &
          
          PID=$!
          echo $PID > app.pid
          echo "Application started with PID: $PID"
          EOF
          
          # 로컬에서 실행 권한 부여
          chmod +x start.sh
          
          # 스크립트 내용 확인
          echo "=== Generated start.sh content ==="
          cat start.sh
          echo "=== End of start.sh content ==="

      # 11. start.sh 파일을 EC2로 전송
      - name: Copy start script to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no start.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/momento/start.sh

      # 12. 환경 변수 전달 및 애플리케이션 시작
      - name: Start application with environment variables
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          AUTHORIZED_REDIRECT_URIS: ${{ secrets.AUTHORIZED_REDIRECT_URIS }}
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
          COOKIE_DOMAIN: ${{ secrets.COOKIE_DOMAIN }}
          SWAGGER_ENABLED: ${{ secrets.SWAGGER_ENABLED }}
        run: |
          # SSH 세션 내에서 환경 변수를 전달하여 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
            cd /home/${{ secrets.EC2_USER }}/momento
          
            # 환경 변수 파일 생성 (보안을 위해 파일로 관리)
            cat > .env << EOF
            export SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}"
            export SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}"
            export SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}"
            export JWT_SECRET="${JWT_SECRET}"
            export KAKAO_CLIENT_ID="${KAKAO_CLIENT_ID}"
            export KAKAO_CLIENT_SECRET="${KAKAO_CLIENT_SECRET}"
            export KAKAO_REDIRECT_URI="${KAKAO_REDIRECT_URI}"
            export AUTHORIZED_REDIRECT_URIS="${AUTHORIZED_REDIRECT_URIS}"
            export ALLOWED_ORIGINS="${ALLOWED_ORIGINS}"
            export COOKIE_DOMAIN="${COOKIE_DOMAIN}"
            export SWAGGER_ENABLED="${SWAGGER_ENABLED}"
            EOF
          
            # 환경 변수 로드 및 애플리케이션 시작
            echo "Loading environment variables and starting application..."
            source .env
            ./start.sh
          
            # 애플리케이션 시작 확인 (30초 대기)
            echo "Waiting for application to start..."
            for i in {1..30}; do
              if curl -f -s http://localhost:8080/actuator/health > /dev/null; then
                echo "✅ Application is running! (attempt $i/30)"
                echo "Health check response:"
                curl -s http://localhost:8080/actuator/health || true
          
                # 환경 변수 파일 삭제 (보안)
                rm -f .env
                exit 0
              fi
              echo "⏳ Waiting... (attempt $i/30)"
              sleep 1
            done
          
            # 시작 실패 시 디버깅 정보 출력
            echo "❌ Application failed to start after 30 seconds"
            echo ""
            echo "=== Checking Java process ==="
            ps aux | grep java || echo "No Java process found"
            echo ""
            echo "=== Last 50 lines of app.log ==="
            if [ -f app.log ]; then
              tail -n 50 app.log
            else
              echo "app.log not found"
            fi
            echo ""
            echo "=== System resources ==="
            free -h
            df -h /
          
            # 실패 시에도 환경 변수 파일 삭제
            rm -f .env
            exit 1
          ENDSSH

      # 13. SSH 키 파일 삭제
      - name: Clean up
        if: always()
        run: |
          rm -f private_key.pem
          rm -f start.sh