name: Deploy to EC2

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/momento-server
  DOCKER_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            ${{ env.DOCKER_IMAGE }}:develop-${{ github.run_number }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.run_number }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat > .env << EOF
          # Docker
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}
          DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          DOCKER_TAG=${{ env.DOCKER_TAG }}

          # Spring Profile
          SPRING_PROFILES_ACTIVE=dev

          # MySQL
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}

          # JWT
          JWT_SECRET=${{ secrets.JWT_SECRET }}

          # Kakao OAuth
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI=https://dev.caffeineoverdose.shop/login/oauth2/code/kakao

          # App Config
          AUTHORIZED_REDIRECT_URIS=https://dev.caffeineoverdose.shop/oauth2/redirect
          ALLOWED_ORIGINS=https://dev.caffeineoverdose.shop
          COOKIE_DOMAIN=.caffeineoverdose.shop
          SWAGGER_ENABLED=true
          EOF

      - name: Create docker-compose override file
        run: |
          cat > docker-compose.override.yml << EOF
          services:
            momento-server:
              image: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          EOF

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'SCRIPT'
          #!/bin/bash
          set -e

          echo "🚀 배포 시작..."

          # 환경 변수 로드
          if [ ! -f .env ]; then
            echo "❌ .env 파일이 없습니다!"
            exit 1
          fi

          # .env 파일 로드 및 export
          set -a
          source .env
          set +a

          # 필수 변수 확인
          if [ -z "$DOCKER_IMAGE" ] || [ -z "$DOCKER_TAG" ]; then
            echo "❌ 필수 환경변수가 설정되지 않았습니다!"
            exit 1
          fi

          # Docker Hub 로그인
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          # 새 이미지 pull
          echo "새 이미지 pull 중: ${DOCKER_IMAGE}:${DOCKER_TAG}"
          docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}

          # MySQL 실행 확인
          if ! docker ps | grep -q momento-mysql; then
            echo "MySQL이 실행되지 않았습니다. docker-compose로 시작 중..."
            docker-compose up -d mysql
            echo "MySQL 초기화 대기 중..."
            sleep 30
          fi

          # 기존 momento-server만 중지
          docker-compose stop momento-server || true
          docker-compose rm -f momento-server || true

          # 새 버전으로 시작 (override 파일이 자동으로 적용됨)
          docker-compose up -d momento-server

          # 헬스체크
          echo "헬스체크 시작..."
          max_attempts=20
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "헬스체크 시도 $attempt/$max_attempts..."

            if docker exec momento-server wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health 2>/dev/null; then
              echo "✅ 헬스체크 성공!"
              break
            else
              if [ $attempt -eq $max_attempts ]; then
                echo "❌ 헬스체크 실패"
                echo "컨테이너 로그:"
                docker-compose logs --tail=100 momento-server
                exit 1
              fi
              sleep 5
              ((attempt++))
            fi
          done

          # nginx 재시작
          docker-compose restart nginx || echo "Nginx 재시작 실패 (무시)"

          # 사용하지 않는 이미지 정리
          docker image prune -f

          echo "✅ 배포 완료!"
          docker-compose ps
          SCRIPT

          chmod +x deploy.sh

      - name: Create deployment package
        run: |
          tar -czf deploy.tar.gz \
            docker-compose.yml \
            docker-compose.override.yml \
            nginx/ \
            mysql/ \
            .env \
            deploy.sh

      - name: Transfer files to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/${{ secrets.EC2_USER }}/momento"
          overwrite: true

      - name: Execute deployment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 20m
          command_timeout: 15m
          script: |
            cd /home/${{ secrets.EC2_USER }}/momento

            # 백업
            [ -f .env ] && cp .env .env.backup.$(date +%Y%m%d_%H%M%S)

            # 압축 해제
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz

            # 배포 스크립트 실행
            ./deploy.sh

            # 최종 확인
            sleep 5
            curl -f https://dev.caffeineoverdose.shop/actuator/health || exit 1

            echo "🎉 배포가 성공적으로 완료되었습니다!"
            echo "이미지: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
            echo "URL: https://dev.caffeineoverdose.shop"