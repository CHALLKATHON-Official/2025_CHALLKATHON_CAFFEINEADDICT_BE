name: Deploy to EC2

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Build application
        run: ./gradlew bootJar

      # Docker 이미지 빌드 및 푸시 추가
      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/develop'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/develop'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/momento-server:latest
            ${{ secrets.DOCKER_USERNAME }}/momento-server:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/momento-server:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/momento-server:buildcache,mode=max

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          # Dockerfile은 더 이상 필요하지 않으므로 제외
          tar -czf deploy.tar.gz \
            docker-compose.yml \
            nginx/ \
            mysql/

      - name: Copy files to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/${{ secrets.EC2_USER }}/momento"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 15m  # 빌드가 없으므로 시간 단축 가능
          script: |
            cd /home/${{ secrets.EC2_USER }}/momento
            
            # 압축 해제
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz
            
            # 환경변수 설정
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}"
            export KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}"
            export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
            export MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}"
            export MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE }}"
            export MYSQL_USER="${{ secrets.MYSQL_USER }}"
            export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            
            # Docker Hub 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # SSL 인증서 초기 발급 (최초 1회만)
            if [ ! -f "./certbot/conf/live/dev.caffeineoverdose.shop/fullchain.pem" ]; then
              echo "SSL 인증서 초기 발급..."
            
              # certbot/www 디렉토리 생성
              mkdir -p ./certbot/www ./certbot/conf
            
              # nginx만 시작 (--no-deps 옵션 사용)
              docker compose up -d --no-deps nginx
              sleep 10
            
              # SSL 인증서 발급
              docker compose run --rm certbot certonly \
                --webroot \
                --webroot-path=/var/www/certbot \
                --email ${{ secrets.LETSENCRYPT_EMAIL }} \
                --agree-tos \
                --no-eff-email \
                --non-interactive \
                -d dev.caffeineoverdose.shop
            
              # nginx 중지
              docker compose down
            else
              echo "SSL 인증서가 이미 존재합니다."
            fi
            
            # 기존 컨테이너 중지 및 제거
            docker compose down || true
            
            # 최신 이미지 풀
            docker compose pull momento-server
            
            # 모든 서비스 시작
            docker compose up -d
            
            # 헬스체크 대기
            echo "서비스 시작 대기 중..."
            sleep 30
            
            # 헬스체크 확인
            for i in {1..10}; do
              if curl -f https://dev.caffeineoverdose.shop/actuator/health; then
                echo "배포 성공!"
                break
              else
                echo "헬스체크 실패. 재시도 중... ($i/10)"
                sleep 10
              fi
            
              if [ $i -eq 10 ]; then
                echo "배포 실패 - 헬스체크 실패"
                docker compose logs momento-server
                exit 1
              fi
            done
            
            # 사용하지 않는 Docker 이미지 정리
            docker image prune -f

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ 배포 성공: https://dev.caffeineoverdose.shop"
          else
            echo "❌ 배포 실패"
          fi