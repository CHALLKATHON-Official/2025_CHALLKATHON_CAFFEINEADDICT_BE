# EC2 배포 환경 설정
spring:
  datasource:
    url: jdbc:mysql://${MOMENTO_DB_URL}:3306/momento_db?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul&autoReconnect=true
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      pool-name: HikariCP-Dev
      leak-detection-threshold: 60000

  # JPA 설정 (운영 최적화)
  jpa:
    hibernate:
      ddl-auto: update  # 개발 서버에서는 update 사용 (운영에서는 validate 권장)
    show-sql: false   # 개발 서버에서는 SQL 로그 비활성화
    properties:
      hibernate:
        format_sql: false
        jdbc:
          lob:
            non_contextual_creation: true
          batch_size: 1000
        order_inserts: true
        order_updates: true

  # Redis 설정 (AWS ElastiCache)
  data:
    redis:
      cluster:
        nodes: ${MOMENTO_REDIS_URL}:6379
        max-redirects: 3
      timeout: 5000ms
      connect-timeout: 5000ms
      lettuce:
        pool:
          max-active: 50
          max-idle: 20
          min-idle: 10
          max-wait: 5000ms
          time-between-eviction-runs: 60000ms
        shutdown-timeout: 1000ms
        cluster:
          refresh:
            adaptive: true
            period: 30000ms

  # Cache 설정 (개발 환경)
  cache:
    redis:
      time-to-live: 7200000  # 2시간
      cache-null-values: false
      key-prefix: "momento:dev:"
      use-key-prefix: true

  # OAuth2 설정 (배포 환경 - 실제 도메인)
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-name: kakao
            authorization-grant-type: authorization_code
            redirect-uri: ${MOMENTO_SERVER_URL_HTTPS}/login/oauth2/code/kakao
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
              - account_email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  servlet:
    multipart:
      enabled: true
      max-file-size: 200MB      # 개별 파일 최대 크기
      max-request-size: 300MB   # 전체 요청 최대 크기


# JWT 설정 (배포 환경 - 보안 강화)
jwt:
  access-token-expiration: 3600000    # 1시간 (운영에서는 짧게)
  refresh-token-expiration: 604800000 # 7일

# 앱 설정 (배포 환경 - GitHub Actions에서 설정)
app:
  oauth2:
    authorized-redirect-uris: ${MOMENTO_SERVER_URL_HTTPS}/oauth2/redirect
  cors:
    allowed-origins: ${MOMENTO_SERVER_URL_HTTPS},http://localhost:3000
  cookie:
    refresh-token:
      name: refreshToken
      max-age: 604800  # 7일
      secure: false     # HTTP 환경에서는 false
      http-only: true
      same-site: lax    # Cross-origin에서는 lax가 더 안전

openai:
  model: gpt-4o-mini  # 개발 환경에서는 더 저렴한 모델 사용

# 서버 설정 (배포용)
server:
  port: 8080
  servlet:
    session:
      cookie:
        secure: true
        http-only: true
        same-site: strict
      timeout: 30m
  # 보안 헤더 강화
  forward-headers-strategy: native
  tomcat:
    remoteip:
      remote-ip-header: x-forwarded-for
      protocol-header: x-forwarded-proto

# 로깅 설정 (배포 서버용 - OAuth2 디버깅 포함)
logging:
  level:
    # 성능에 영향을 주는 로그 레벨 조정
    org.springframework.web.filter.CommonsRequestLoggingFilter: WARN
    org.apache.http: WARN
    com.zaxxer.hikari: WARN
    org.hibernate.engine.internal.StatisticalLoggingSessionEventListener: WARN

# Swagger 설정 (배포용 - 보안 고려)
springdoc:
  swagger-ui:
    enabled: true
    try-it-out-enabled: true
  api-docs:
    enabled: true

# 액추에이터 설정 (배포용 - 최소한의 정보만 노출)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: when-authorized
  security:
    enabled: true

  # 성능 최적화 설정 (JPA에 추가)
  jpa:
    properties:
      hibernate:
        connection:
          provider_disables_autocommit: false
        jdbc:
          batch_size: 1000

  # 외부 API 타임아웃 설정
  web:
    client:
      read-timeout: 30s
      connect-timeout: 10s